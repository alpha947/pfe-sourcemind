#fichier de definition des parametres de deploiement de l'application en mode contenaire
services:
  postgresdb:
    container_name: postgrescontainer
    image: postgres:16.1
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - postgresvolume:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql #les mains de alpha C'est le chargement de la base de donnees via un fichier sql predefinis

  pgadmin:
    container_name: pgadmincontainer #definiions d'un container
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_DEFAULT_ADDRESS: 6000
      PGADMIN_LISTEN_PORT: 6000
    expose:
      - 6000
    ports:
      - 7000:6000
    volumes:
      - pgadminvolume:/var/lib/pgadmin

volumes:
  pgadminvolume:
  postgresvolume:
# #cote java 
# FROM eclipse-temurin
# ARG JAR_FILE=target/*.jar
# COPY ${JAR_FILE} app.jar
# EXPOSE 8080
# ENTRYPOINT [&amp;quot;java&amp;quot;, &amp;quot;-jar&amp;quot;, &amp;quot;/app.jar&amp;quot;]
# docker build -t spring-boot-docker .
# Sending build context to Docker daemon  15.98MB
# Step 1/5 : FROM eclipse-temurin
# ---a3562aa0b991
# Step 2/5 : ARG JAR_FILE=target/*.jar
# ---Running in a8c13e294a66
# Removing intermediate container a8c13e294a66
# ---aa039166d524
# Step 3/5 : COPY ${JAR_FILE} app.jar
# COPY failed: no source files were specified

# FROM eclipse-temurin
# WORKDIR /app
 
# COPY .mvn/ .mvn
# COPY mvnw pom.xml ./
# RUN ./mvnw dependency:go-offline
 
# COPY src ./src
 
# CMD [&amp;quot;./mvnw&amp;quot;, &amp;quot;spring-boot:run&amp;quot;]